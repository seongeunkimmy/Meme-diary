{"ast":null,"code":"import { returnErrors } from './errorAction';\nimport { push } from 'react-router-redux';\nimport { history } from '../routes.js'; // import  axios  from 'axios';\n\nimport api from '../api/api';\nimport { USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, REGISTER_SUCCESS, REGISTER_FAIL, CLEAR_ERRORS } from './types'; //load user\n\nexport const loadUser = () => (dispatch, getState) => {\n  dispatch({\n    type: USER_LOADING\n  });\n  api.get('/api/auth/user', tokenConfig(getState)).then(res => dispatch({\n    type: USER_LOADED,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n}; //register user \n\nexport const register = ({\n  firstName,\n  lastName,\n  email,\n  password\n}) => dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    firstName,\n    lastName,\n    email,\n    password\n  });\n  api.post('/api/user', body, config).then(res => dispatch({\n    type: REGISTER_SUCCESS,\n    payload: res.data\n  })).then(res => {\n    history.push('/');\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  });\n}; //log-out\n\nexport const logout = () => {\n  return {\n    type: LOGOUT_SUCCESS\n  };\n}; //log-in\n\nexport const login = ({\n  email,\n  password\n}) => dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n  api.post('/api/auth', body, config).then(res => dispatch({\n    type: LOGIN_SUCCESS,\n    payload: res.data\n  })).then(res => {\n    history.push('/home');\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL'));\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  });\n}; //Get token and add to headers\n\nconst tokenConfig = getState => {\n  const token = getState().auth.token;\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  };\n\n  if (token) {\n    config.headers['x-auth-token'] = token;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["/Users/seong-eunkim/Desktop/Meme-diary/client/src/actions/authAction.js"],"names":["returnErrors","push","history","api","USER_LOADED","USER_LOADING","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","REGISTER_SUCCESS","REGISTER_FAIL","CLEAR_ERRORS","loadUser","dispatch","getState","type","get","tokenConfig","then","res","payload","data","catch","err","response","status","register","firstName","lastName","email","password","config","headers","body","JSON","stringify","post","logout","login","token","auth"],"mappings":"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","sourcesContent":["import { returnErrors } from './errorAction';\nimport { push } from 'react-router-redux';\nimport { history } from '../routes.js'\n// import  axios  from 'axios';\nimport api from '../api/api';\nimport {\n    USER_LOADED, \n    USER_LOADING, \n    AUTH_ERROR, \n    LOGIN_SUCCESS, \n    LOGIN_FAIL, \n    LOGOUT_SUCCESS, \n    REGISTER_SUCCESS, \n    REGISTER_FAIL, \n    CLEAR_ERRORS\n} from './types';\n\n//load user\nexport const loadUser = () => (dispatch, getState) => {\n    dispatch({type: USER_LOADING});\n\n    \n    api.get('/api/auth/user', tokenConfig(getState))\n      .then(res => dispatch({\n          type: USER_LOADED,\n          payload: res.data\n      }))\n      .catch(err => {\n          dispatch(returnErrors(err.response.data, err.response.status));\n          dispatch({\n              type: AUTH_ERROR\n          });\n      \n      });\n    };\n\n//register user \nexport const register = ({firstName, lastName, email, password}) => dispatch => {\n  \n const config = {\n     headers: {\n         'Content-Type': 'application/json'\n     }\n }\n\n const body = JSON.stringify({firstName, lastName, email, password});\n \n    api.post('/api/user', body, config)\n    .then(res => dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data\n    }))\n    .then(res => {\n        history.push('/');\n    })\n    .catch(err => {\n        dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\n        dispatch({\n            type: REGISTER_FAIL\n        })\n    }\n    )\n}\n  \n//log-out\nexport const logout = () => {\n    return {\n        type: LOGOUT_SUCCESS\n    }\n}\n\n//log-in\nexport const login = ({ email, password }) => dispatch => {\n    \n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n\n    const body = JSON.stringify({ email, password });\n\n    api.post('/api/auth', body, config)\n       .then(res => \n           dispatch({\n               type: LOGIN_SUCCESS,\n               payload: res.data\n           })\n       )\n       .then(res => {\n        history.push('/home');\n    })\n        .catch(err => {\n            dispatch(returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL'));\n            dispatch({\n                type: LOGIN_FAIL\n            })\n        }\n       )\n\n};\n\n//Get token and add to headers\nconst tokenConfig = getState => {\n\nconst token = getState().auth.token;\nconst config = {\n    headers: {\n        \"Content-type\": \"application/json\"\n    }\n}\n\nif(token) {\n    config.headers['x-auth-token'] = token;\n}\nreturn config;\n}\n\n"]},"metadata":{},"sourceType":"module"}