{"ast":null,"code":"import{returnErrors}from'./errorAction';import{history}from'../routes.js';// import  axios  from 'axios';\nimport api from'../api/api';import{USER_LOADED,USER_LOADING,AUTH_ERROR,LOGIN_SUCCESS,LOGIN_FAIL,LOGOUT_SUCCESS,REGISTER_SUCCESS,REGISTER_FAIL}from'./types';//load user\nexport var loadUser=function loadUser(){return function(dispatch,getState){dispatch({type:USER_LOADING});api.get('/api/auth/user',tokenConfig(getState)).then(function(res){return dispatch({type:USER_LOADED,payload:res.data});}).catch(function(err){dispatch(returnErrors(err.response.data,err.response.status));dispatch({type:AUTH_ERROR});});};};//register user \nexport var register=function register(_ref){var firstName=_ref.firstName,lastName=_ref.lastName,email=_ref.email,password=_ref.password;return function(dispatch){var config={headers:{'Content-Type':'application/json'}};var body=JSON.stringify({firstName:firstName,lastName:lastName,email:email,password:password});api.post('/api/user',body,config).then(function(res){return dispatch({type:REGISTER_SUCCESS,payload:res.data});}).then(function(res){history.push('/');}).catch(function(err){dispatch(returnErrors(err.response.data,err.response.status,'REGISTER_FAIL'));dispatch({type:REGISTER_FAIL});});};};//log-out\nexport var logout=function logout(){return{type:LOGOUT_SUCCESS};};//log-in\nexport var login=function login(_ref2){var email=_ref2.email,password=_ref2.password;return function(dispatch){var config={headers:{'Content-Type':'application/json'}};var body=JSON.stringify({email:email,password:password});api.post('/api/auth',body,config).then(function(res){return dispatch({type:LOGIN_SUCCESS,payload:res.data});}).catch(function(err){dispatch(returnErrors(err.response.data,err.response.status,'LOGIN_FAIL'));dispatch({type:LOGIN_FAIL});});};};//Get token and add to headers\nexport var tokenConfig=function tokenConfig(getState){var token=getState().auth.token;var config={headers:{\"Content-type\":\"application/json\"}};if(token){config.headers['x-auth-token']=token;}return config;};","map":{"version":3,"sources":["/Users/seong-eunkim/Desktop/Meme-diary/client/src/actions/authAction.js"],"names":["returnErrors","history","api","USER_LOADED","USER_LOADING","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","REGISTER_SUCCESS","REGISTER_FAIL","loadUser","dispatch","getState","type","get","tokenConfig","then","res","payload","data","catch","err","response","status","register","firstName","lastName","email","password","config","headers","body","JSON","stringify","post","push","logout","login","token","auth"],"mappings":"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","sourcesContent":["import { returnErrors } from './errorAction';\nimport { history } from '../routes.js'\n// import  axios  from 'axios';\nimport api from '../api/api';\nimport {\n    USER_LOADED, \n    USER_LOADING, \n    AUTH_ERROR, \n    LOGIN_SUCCESS, \n    LOGIN_FAIL, \n    LOGOUT_SUCCESS, \n    REGISTER_SUCCESS, \n    REGISTER_FAIL\n} from './types';\n\n//load user\nexport const loadUser = () => (dispatch, getState) => {\n    dispatch({type: USER_LOADING});\n\n    \n    api.get('/api/auth/user', tokenConfig(getState))\n      .then(res => dispatch({\n          type: USER_LOADED,\n          payload: res.data\n      }))\n      .catch(err => {\n          dispatch(returnErrors(err.response.data, err.response.status));\n          dispatch({\n              type: AUTH_ERROR\n          });\n      \n      });\n    };\n\n//register user \nexport const register = ({firstName, lastName, email, password}) => dispatch => {\n  \n const config = {\n     headers: {\n         'Content-Type': 'application/json'\n     }\n }\n\n const body = JSON.stringify({firstName, lastName, email, password});\n \n    api.post('/api/user', body, config)\n    .then(res => dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data\n    }))\n    .then(res => {\n        history.push('/');\n    })\n    .catch(err => {\n        dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\n        dispatch({\n            type: REGISTER_FAIL\n        })\n    }\n    )\n}\n  \n//log-out\nexport const logout = () => {\n    return {\n        type: LOGOUT_SUCCESS\n    }\n}\n\n//log-in\nexport const login = ({ email, password }) => dispatch => {\n    \n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n\n    const body = JSON.stringify({ email, password });\n\n    api.post('/api/auth', body, config)\n       .then(res => \n        dispatch({\n            type: LOGIN_SUCCESS,\n            payload: res.data\n        })\n        )\n        .catch(err => {\n            dispatch(returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL'));\n            dispatch({\n                type: LOGIN_FAIL\n            })\n        }\n       )\n\n};\n\n//Get token and add to headers\nexport const tokenConfig = getState => {\n\nconst token = getState().auth.token;\nconst config = {\n    headers: {\n        \"Content-type\": \"application/json\"\n    }\n}\n\nif(token) {\n    config.headers['x-auth-token'] = token;\n}\nreturn config;\n}\n\n"]},"metadata":{},"sourceType":"module"}