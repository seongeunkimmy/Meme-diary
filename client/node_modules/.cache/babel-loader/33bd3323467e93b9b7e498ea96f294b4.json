{"ast":null,"code":"// import {FETCH_DIARY_PENDING, FETCH_DIARY_SUCCESS, FETCH_DIARY_ERROR } from '../actions/types';\n// const initialState = {\n//     diaries: [],\n//     loading: false,\n//     error: null\n//   };\n// export default function diariesReducer(state = initialState, action) {\n//     switch(action.type) {\n//       case FETCH_DIARY_PENDING:\n//         // Mark the state as \"loading\" so we can show a spinner or something\n//         // Also, reset any errors. We're starting fresh.\n//         return {\n//           ...state,\n//           loading: true,\n//           error: null\n//         };\n//       case FETCH_DIARY_SUCCESS:\n//         // All done: set loading \"false\".\n//         // Also, replace the items with the ones from the server\n//         return {\n//           ...state,\n//           loading: false,\n//           diaries: action.payload.diaries\n//         };\n//       case FETCH_DIARY_ERROR:\n//         // The request failed. It's done. So set loading to \"false\".\n//         // Save the error, so we can display it somewhere.\n//         // Since it failed, we don't have items to display anymore, so set `items` empty.\n//         //\n//         // This is all up to you and your app though:\n//         // maybe you want to keep the items around!\n//         // Do whatever seems right for your use case.\n//         return {\n//           ...state,\n//           loading: false,\n//           error: action.payload.error,\n//           diaries: []\n//         };\n//       default:\n//         // ALWAYS have a default case in a reducer\n//         return state;\n//     }\n//   }\nimport { FETCH_DIARY_SUCCESS } from '../action/types';\nconst initialState = {\n  diaries: []\n};\n\nconst executeFetchDiarySuccess = (state, action) => {\n  return { ...state,\n    diaries: action.diaries\n  };\n};\n\nconst diariesReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_DIARY_SUCCESS:\n      return executeFetchDiarySuccess(state, action);\n\n    default:\n      return state;\n  }\n};\n\nexport default diariesReducer;","map":{"version":3,"sources":["/Users/seong-eunkim/Desktop/Meme-diary/client/src/reducers/diariesReducer.js"],"names":["FETCH_DIARY_SUCCESS","initialState","diaries","executeFetchDiarySuccess","state","action","diariesReducer","type"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA,SAASA,mBAAT,QAAoC,iBAApC;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE;AADU,CAArB;;AAIA,MAAMC,wBAAwB,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAClD,SAAO,EACL,GAAGD,KADE;AAELF,IAAAA,OAAO,EAAEG,MAAM,CAACH;AAFX,GAAP;AAID,CALD;;AAOA,MAAMI,cAAc,GAAG,CAACF,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkC;AACvD,UAAOA,MAAM,CAACE,IAAd;AACE,SAAKP,mBAAL;AACE,aAAOG,wBAAwB,CAACC,KAAD,EAAQC,MAAR,CAA/B;;AACH;AACE,aAAOD,KAAP;AAJH;AAMD,CAPD;;AASA,eAAeE,cAAf","sourcesContent":["// import {FETCH_DIARY_PENDING, FETCH_DIARY_SUCCESS, FETCH_DIARY_ERROR } from '../actions/types';\n\n// const initialState = {\n//     diaries: [],\n//     loading: false,\n//     error: null\n//   };\n\n\n// export default function diariesReducer(state = initialState, action) {\n//     switch(action.type) {\n//       case FETCH_DIARY_PENDING:\n//         // Mark the state as \"loading\" so we can show a spinner or something\n//         // Also, reset any errors. We're starting fresh.\n//         return {\n//           ...state,\n//           loading: true,\n//           error: null\n//         };\n  \n//       case FETCH_DIARY_SUCCESS:\n//         // All done: set loading \"false\".\n//         // Also, replace the items with the ones from the server\n//         return {\n//           ...state,\n//           loading: false,\n//           diaries: action.payload.diaries\n//         };\n  \n//       case FETCH_DIARY_ERROR:\n//         // The request failed. It's done. So set loading to \"false\".\n//         // Save the error, so we can display it somewhere.\n//         // Since it failed, we don't have items to display anymore, so set `items` empty.\n//         //\n//         // This is all up to you and your app though:\n//         // maybe you want to keep the items around!\n//         // Do whatever seems right for your use case.\n//         return {\n//           ...state,\n//           loading: false,\n//           error: action.payload.error,\n//           diaries: []\n//         };\n  \n//       default:\n//         // ALWAYS have a default case in a reducer\n//         return state;\n//     }\n//   }\n\nimport { FETCH_DIARY_SUCCESS } from '../action/types'\n\nconst initialState = {\n  diaries: []\n}\n\nconst executeFetchDiarySuccess = (state, action) => {\n  return {\n    ...state,\n    diaries: action.diaries\n  }\n}\n\nconst diariesReducer = (state = initialState, action) => {\n  switch(action.type) {\n    case FETCH_DIARY_SUCCESS:\n      return executeFetchDiarySuccess(state, action)\n   default:\n     return state;\n  }\n}\n\nexport default diariesReducer;"]},"metadata":{},"sourceType":"module"}