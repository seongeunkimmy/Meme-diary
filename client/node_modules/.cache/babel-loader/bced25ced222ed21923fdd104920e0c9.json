{"ast":null,"code":"import { FETCH_DIARY_PENDING, FETCH_DIARY_SUCCESS, FETCH_DIARY_ERROR } from '../actions/types';\nconst initialState = {\n  diaries: [],\n  loading: false,\n  error: null\n};\nexport default function diariesReducer(state = initialState, action) {\n  switch (action.type) {\n    case FETCH_DIARY_PENDING:\n      // Mark the state as \"loading\" so we can show a spinner or something\n      // Also, reset any errors. We're starting fresh.\n      return { ...state,\n        loading: true,\n        error: null\n      };\n\n    case FETCH_DIARY_SUCCESS:\n      // All done: set loading \"false\".\n      // Also, replace the items with the ones from the server\n      return { ...state,\n        loading: false,\n        diaries: action.payload.diaries\n      };\n\n    case FETCH_DIARY_ERROR:\n      // The request failed. It's done. So set loading to \"false\".\n      // Save the error, so we can display it somewhere.\n      // Since it failed, we don't have items to display anymore, so set `items` empty.\n      //\n      // This is all up to you and your app though:\n      // maybe you want to keep the items around!\n      // Do whatever seems right for your use case.\n      return { ...state,\n        loading: false,\n        error: action.payload.error,\n        diaries: []\n      };\n\n    default:\n      // ALWAYS have a default case in a reducer\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/seong-eunkim/Desktop/Meme-diary/client/src/reducers/diariesReducer.js"],"names":["FETCH_DIARY_PENDING","FETCH_DIARY_SUCCESS","FETCH_DIARY_ERROR","initialState","diaries","loading","error","diariesReducer","state","action","type","payload"],"mappings":"AAAA,SAAQA,mBAAR,EAA6BC,mBAA7B,EAAkDC,iBAAlD,QAA2E,kBAA3E;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,EADQ;AAEjBC,EAAAA,OAAO,EAAE,KAFQ;AAGjBC,EAAAA,KAAK,EAAE;AAHU,CAArB;AAOA,eAAe,SAASC,cAAT,CAAwBC,KAAK,GAAGL,YAAhC,EAA8CM,MAA9C,EAAsD;AACjE,UAAOA,MAAM,CAACC,IAAd;AACE,SAAKV,mBAAL;AACE;AACA;AACA,aAAO,EACL,GAAGQ,KADE;AAELH,QAAAA,OAAO,EAAE,IAFJ;AAGLC,QAAAA,KAAK,EAAE;AAHF,OAAP;;AAMF,SAAKL,mBAAL;AACE;AACA;AACA,aAAO,EACL,GAAGO,KADE;AAELH,QAAAA,OAAO,EAAE,KAFJ;AAGLD,QAAAA,OAAO,EAAEK,MAAM,CAACE,OAAP,CAAeP;AAHnB,OAAP;;AAMF,SAAKF,iBAAL;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAO,EACL,GAAGM,KADE;AAELH,QAAAA,OAAO,EAAE,KAFJ;AAGLC,QAAAA,KAAK,EAAEG,MAAM,CAACE,OAAP,CAAeL,KAHjB;AAILF,QAAAA,OAAO,EAAE;AAJJ,OAAP;;AAOF;AACE;AACA,aAAOI,KAAP;AApCJ;AAsCD","sourcesContent":["import {FETCH_DIARY_PENDING, FETCH_DIARY_SUCCESS, FETCH_DIARY_ERROR } from '../actions/types';\n\nconst initialState = {\n    diaries: [],\n    loading: false,\n    error: null\n  };\n\n\nexport default function diariesReducer(state = initialState, action) {\n    switch(action.type) {\n      case FETCH_DIARY_PENDING:\n        // Mark the state as \"loading\" so we can show a spinner or something\n        // Also, reset any errors. We're starting fresh.\n        return {\n          ...state,\n          loading: true,\n          error: null\n        };\n  \n      case FETCH_DIARY_SUCCESS:\n        // All done: set loading \"false\".\n        // Also, replace the items with the ones from the server\n        return {\n          ...state,\n          loading: false,\n          diaries: action.payload.diaries\n        };\n  \n      case FETCH_DIARY_ERROR:\n        // The request failed. It's done. So set loading to \"false\".\n        // Save the error, so we can display it somewhere.\n        // Since it failed, we don't have items to display anymore, so set `items` empty.\n        //\n        // This is all up to you and your app though:\n        // maybe you want to keep the items around!\n        // Do whatever seems right for your use case.\n        return {\n          ...state,\n          loading: false,\n          error: action.payload.error,\n          diaries: []\n        };\n  \n      default:\n        // ALWAYS have a default case in a reducer\n        return state;\n    }\n  }"]},"metadata":{},"sourceType":"module"}